1] How to convert a Array into ArrayList and vice-versa? Write example code
snippet

ans==To convert arrays into arraylist following methods can be used.
           1. Arrays.asList()
           2.Collections.addAll()
           3.add()   method

 -- using Arrays.asList()---

import java.util.*;
 class Main
{
    public static void main (String[] args)
    {
        String[] names = {"Akshata", "Roopa","Janaki", "Shweta"};
          // Conversion of array to ArrayList
        // using Arrays.asList
        List al = Arrays.asList(names);
 
        System.out.println(al);
    }
}

-----using Collections.addAll()-------
import java.util.*;
 
class Main
{
    public static void main (String[] args)
    {
        String[] names = {"Akshata", "Roopa","Janaki", "Shweta"};
 
        List<String> al =
            new ArrayList<String>(Arrays.asList(names));
        System.out.println(al);
 
        // Adding some more values to the List.
        al.add("anu");
        al.add("Nisha");
System.out.println("\nArrayList After adding two" +
                           " more names: ");
        System.out.println(al);
    }
}

----using add() method------

class Main
{
    public static void main (String[] args)
    {
        String[] names = {"Akshata", "Roopa","Janaki", "Shweta"};
 
        List<String> al = new ArrayList<String>();
 
        // adding elements of array to arrayList.
        Collections.addAll(al, names);
 
        System.out.println(al);
    }
}

----------------------------------------------------------------------------------------------------------------------------------------------------------------------

2] : Why collections are used in java if everything can be implemented using Array?
ans==Arrays can hold the only the same type of data in its collection i.e only homogeneous data types elements are allowed in case of arrays. Collection, on the other hand, can hold both homogeneous and heterogeneous elements.

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
3]  What are fail-fast and fail-safe collection iterations
ans==
===Fail-Fast Iterators===
Fail-fast iterators in Java don't play along when the underlying collection gets modified.

Collections maintain an internal counter called modCount. Each time an item is added or removed from the Collection, this counter gets incremented.

When iterating, on each next() call, the current value of modCount gets compared with the initial value. If there's a mismatch, it throws ConcurrentModificationException which aborts the entire operation.

Default iterators for Collections from java.util package such as ArrayList, HashMap, etc. are Fail-Fast.

ArrayList<Integer> numbers = // ...

Iterator<Integer> iterator = numbers.iterator();
while (iterator.hasNext()) {
    Integer number = iterator.next();
    numbers.add(50);
}

In the code snippet above, the ConcurrentModificationException gets thrown at the beginning of a next iteration cycle after the modification was performed.

The Fail-Fast behavior isn't guaranteed to happen in all scenarios as it's impossible to predict behavior in case of concurrent modifications. These iterators throw ConcurrentModificationException on a best effort basis.

If during iteration over a Collection, an item is removed using Iterator‘s remove() method, that's entirely safe and doesn't throw an exception.

However, if the Collection‘s remove() method is used for removing an element, it throws an exception:

ArrayList<Integer> numbers = // ...

Iterator<Integer> iterator = numbers.iterator();
while (iterator.hasNext()) {
    if (iterator.next() == 30) {
        iterator.remove(); // ok!
    }
}

iterator = numbers.iterator();
while (iterator.hasNext()) {
    if (iterator.next() == 40) {
        numbers.remove(2); // exception
    }
}

 ==Fail-Safe Iterators==
Fail-Safe iterators favor lack of failures over the inconvenience of exception handling.

Those iterators create a clone of the actual Collection and iterate over it. If any modification happens after the iterator is created, the copy still remains untouched. Hence, these Iterators continue looping over the Collection even if it's modified.

However, it's important to remember that there's no such thing as a truly Fail-Safe iterator. The correct term is Weakly Consistent.

That means, if a Collection is modified while being iterated over, what the Iterator sees is weakly guaranteed. This behavior may be different for different Collections and is documented in Javadocs of each such Collection.

The Fail-Safe Iterators have a few disadvantages, though. One disadvantage is that the Iterator isn't guaranteed to return updated data from the Collection, as it's working on the clone instead of the actual Collection.

Another disadvantage is the overhead of creating a copy of the Collection, both regarding time and memory.

Iterators on Collections from java.util.concurrent package such as ConcurrentHashMap, CopyOnWriteArrayList, etc. are Fail-Safe in nature.

ConcurrentHashMap<String, Integer> map = new ConcurrentHashMap<>();

map.put("First", 10);
map.put("Second", 20);
map.put("Third", 30);
map.put("Fourth", 40);

Iterator<String> iterator = map.keySet().iterator();

while (iterator.hasNext()) {
    String key = iterator.next();
    map.put("Fifth", 50);
}

In the code snippet above, we're using Fail-Safe Iterator. Hence, even though a new element is added to the Collection during the iteration, it doesn't throw an exception.

The default iterator for the ConcurrentHashMap is weakly consistent. This means that this Iterator can tolerate concurrent modification, traverses elements as they existed when Iterator was constructed and may (but isn't guaranteed to) reflect modifications to the Collection after the construction of the Iterator.

Hence, in the code snippet above, the iteration loops five times, which means it does detect the newly added element to the Collection.


-----------------------------------------------------------------------------------------------------------------------------------------------------------------------

4]  Difference between Iterator and ListIterator
ans==
    == Iterator==
  1.Can traverse elements present in Collection only in the forward direction.
  2.Helps to traverse Map, List and Set.
  3.Indexes cannot be obtained by using Iterator.
 4.Cannot modify or replace elements present in Collection
 5.Cannot add elements and it throws ConcurrentModificationException.
 6.Certain methods of Iterator are next(), remove() and hasNext().

  ==ListIterator==
 1.Can traverse elements present in Collection both in forward and backward directions.
 2.Can only traverse List and not the other two.
 3.It has methods like nextIndex() and previousIndex() to obtain indexes of elements at any time while traversing List.
 4.We can modify or replace elements with the help of set(E e)
 5.Can easily add elements to a collection at any time.
 6.Certain methods of ListIterator are next(), previous(), hasNext(), hasPrevious(), add(E e).

---------------------------------------------------------------------------------------------------------------------------------------------------------------------

5]: Explain the real situation use of HashMap, HashSet and LinkedList collections
ans ==The HashMap class of the Java collections framework provides the functionality of the hash table data structure. It stores elements in key/value pairs. 

In Java, HashSet is commonly used if we have to access elements randomly. It is because elements in a hash table are accessed using hash codes. The hashcode of an element is a unique identity that helps to identify the element in a hash table. HashSet cannot contain duplicate elements.

linkedList It is used to append all of the elements in the specified collection to the end of this list, in the order that they are returned by the specified collection's iterator. It is used to append all the elements in the specified collection, starting at the specified position of the list.
